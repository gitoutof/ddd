
name: ddd

on:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
env:
  
  REPO_URL: https://github.com/gitoutof/openwrt
  REPO_BRANCH: 19.07
  FEEDS_CONF: feeds.conf.default
  #CONFIG_FILE: lienol_bypass.config
  DIY_P1_SH: feed.sh
  DIY_P2_SH: diy_bypass.sh
  SSH_ACTION: false
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai


jobs:
  build:
    runs-on: ubuntu-18.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
      - name: Send greeting
        run: echo "Hello ${{ github.event.inputs.ssh }}"

      - name: Checkout
        uses: actions/checkout@v2

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
           echo Hello, world!
           echo $DEBIAN_FRONTEND
           pwd
           ls -al
           whoami
           ls -al /etc/apt/sources.list.d/* 
           ls -al /usr/share/dotnet 
           ls -al /usr/local/lib/android 
           ls -al /opt/ghc
           sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
           sudo -E apt-get -qq update
           
           curl https://raw.githubusercontent.com/Lienol/openwrt/19.07/README.md | grep -e 'sudo apt-get -y .*' | head -n1 | sed 's/sudo apt-get -y install //g'
   
           sudo -E apt-get -qq install $(curl https://raw.githubusercontent.com/Lienol/openwrt/19.07/README.md | grep -e 'sudo apt-get -y .*' | head -n1 | sed 's/sudo apt-get -y install //g')
           sudo -E apt-get -qq install python-dns python-django python-twisted python-yaml python-parsley
           sudo -E apt-get -qq autoremove --purge
           sudo -E apt-get -qq clean
           sudo timedatectl set-timezone "$TZ"
           sudo mkdir -p /workdir
           #sudo chown $USER:$GROUPS /workdir
           
      - name: Clone source code
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone --depth 1 -b $REPO_BRANCH $REPO_URL openwrt
          ls -al /workdir
          ls -al /workdir/openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
          cat openwrt/feeds.conf.default
          
      - name: Clone other packages
        run: |
          ls -al /workdir/openwrt/package
          #git clone --depth 1 https://github.com/esirplayground/luci-theme-atmaterial-ColorIcon.git openwrt/package/luci-theme-atmaterial-ColorIcon
          ls -al /workdir/openwrt/package
          pwd
          ls -al
          #git clone --depth 1 https://github.com/rosywrt/luci-theme-rosy.git && mv luci-theme-rosy/luci-theme-rosy openwrt/package/luci-theme-rosy
          ls -al
          git clone --depth 1 -b master https://github.com/vernesong/OpenClash.git && mv OpenClash/luci-app-openclash openwrt/package/luci-app-openclash
          #git clone --depth 1 https://github.com/pymumu/smartdns.git openwrt/package/smartdns
          #git clone --depth 1 -b lede https://github.com/pymumu/luci-app-smartdns.git openwrt/package/luci-app-smartdns
          ls -al /workdir/openwrt/package
          
      - name: Load custom feeds
        run: |
          ls -al
          pwd
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          cat openwrt/feeds.conf.default
          
          chmod +x $DIY_P1_SH
          cd openwrt
          pwd 
          ls -al
          cat $GITHUB_WORKSPACE/$DIY_P1_SH
          
          $GITHUB_WORKSPACE/$DIY_P1_SH
          
      - name: Update feeds
        run: |
          cd openwrt
          ./scripts/feeds update -a
          ls -al ./feeds/luci/applications/luci-app-smartdns
          ls -al ./feeds/packages/net/smartdns
          
          rm -rf ./feeds/luci/applications/luci-app-smartdns
          rm -rf ./feeds/packages/net/smartdns
          
          ls -al
          ls -al ./scripts
          echo ========
          ./scripts/feeds list -n
          echo ========
          ./scripts/feeds list -s
          echo ========
          ./scripts/feeds list -f

      - name: Install feeds
        run: |
          pwd
          ls -al
          cd openwrt 
          ls -al
          ls -al feeds/
          
          ./scripts/feeds install -a
          
      - name: Load custom configuration
        run: |
          ls -al
          pwd
          
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          
          [ -e files ] && ls -al openwrt/files
          [ -e $CONFIG_FILE ] && ls -al openwrt/.config
          
          chmod +x $DIY_P2_SH
          cd openwrt
          cat $GITHUB_WORKSPACE/$DIY_P2_SH
          $GITHUB_WORKSPACE/$DIY_P2_SH
          
          cat package/base-files/files/bin/config_generate |grep 192
          
          #    cat packate/lean/default-settings/files/zzz-default-settings
          cat package/base-files/files/bin/config_generate |grep ntp
          
          cat $GITHUB_WORKSPACE/$DIY_P2_SH
          
          
      - name: SSH connection via tmate
        uses: gitoutof/ssh2actions@main
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Download package
        id: package
        run: |
          cd openwrt
          ls -al
          
          make defconfig
          echo ==defconfig__end====
          
          make download -j8
          echo ==download__end=====
          
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile the firmware
        id: compile
        run: |
          cd openwrt
          ls -al
          echo -e "$(nproc) thread compile"
          
          make -j$(nproc) || make -j1 || make -j1 V=s
          
          echo ====compile--end===
          
          echo "::set-output name=status::success"
          
          ##grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          
          ##[ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          
          ##echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          
          echo =====display--$dighub_env--device-name====
          
          
      - name: Check space usage
        if: (!cancelled())
        run: df -hT

      - name: Upload bin directory
        uses: actions/upload-artifact@main
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin_${{ steps.compile.outputs.DEVICE_NAME }}_${{ steps.compile.outputs.FILE_DATE }}
          #name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin
           
          run: |
            ls -al
            echo openwrt/bin
  

      - name: Organize files
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          ls -al
          
          cd openwrt/bin/targets/*/*
          ls -al
          
          rm -rf packages
          ls -al
          
          echo ====$github_env=====
          echo "::set-output name=FIRMWARE::$PWD"
          
          ##echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "::set-output name=status::success"
          
      - name: Upload firmware directory
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: OpenWrt_firmware_${{ steps.compile.outputs.DEVICE_NAME }}_${{ steps.compile.outputs.FILE_DATE }}
          path: ${{ steps.organize.outputs.FIRMWARE }}
      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
